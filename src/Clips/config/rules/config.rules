;===============================================================================
;
; The rules for loading the configuration
; 
; @version 1.0
; @author Jack <guitarpoet@gmail.com>
; @date Thu Dec 25 15:57:16 2014
;
;===============================================================================

;===============================================================================
;
; Core Rules for loading the config
;
;===============================================================================

(defglobal ?*config* = "clips_tool.json")

(defrule generate-config-file-names-to-test
	(Clips\Config)
	(not (config file name generated))
	=>
	(assert (config-file (clips-path (str-cat "/../config/" ?*config*)))) ; For clips tools's config
	(assert (config-file (clips-path (str-cat "/config/" ?*config*)))) ; For clips's config
	(assert (config-file (str-cat "/etc/clips/" ?*config*))) ; For /etc/clips/
	(assert (config-file (str-cat "/etc/" ?*config*))) ; For /etc/ 
	(assert (config-file (str-cat (cwd) "/config/" ?*config*))) ; For $cwd/config/rules
	(assert (config-file (str-cat (cwd) "/rules/" ?*config*))) ; For $cwd/rules
	(assert (config-file (str-cat (cwd) "/" ?*config*))) ; For $cwd
	(assert (config file name generated))
)

(defrule remove-the-config-if-file-not-exists
	?config-file <- (config-file ?file)
	(test (not (file-exists ?file)))
	=>
	(retract ?config-file)
)

(defrule read-the-config-if-file-exists
	?c <- (Clips\Config (files $?files))
	?config-file <- (config-file ?file)
	(test (file-exists ?file))
	=>
	(retract ?config-file)
	(modify ?c (files (push$ $?files ?file)))
)
