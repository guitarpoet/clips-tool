;===============================================================================
;
; Core Rules for PHP Clips
; 
; The core rules(about loading and others) for PHP clips, will load inside
; the CLIPS environment. Won't affect others
;
; @version 1.0
; @author Jack <guitarpoet@gmail.com>
; @date Thu Dec 25 12:40:29 2014
;
;===============================================================================

;===============================================================================
;
; Core Rules for loading
;
;===============================================================================
(deffunction clips-tool-path (?path) (php_call "clips_tool_path" ?path))

(defrule if-the-load-begin-with-ci-load-using-ci
	?l <- (load_arg ?file)
	(test (str-index "ci://" ?file))
	=>
	(retract ?l)
	(assert (ci_load_arg (sub-string 6 (str-length ?file) ?file)))
)

(defrule if-file-exists-in-clips-path-then-load-it
    (declare (salience ?*low*))
	?a <- (load_arg ?file)
	(test (file-exists (clips-path ?file)))
	=>
	(assert (command (file-contents (clips-path ?file))))
	(retract ?a)
)

(defrule if-file-exists-in-clips-tool-path-then-load-it
    (declare (salience ?*low*))
	?a <- (load_arg ?file)
	(test (file-exists (clips-tool-path ?file)))
	=>
	(assert (command (file-contents (clips-tool-path ?file))))
	(retract ?a)
)

(defrule if-file-exists-in-cwd-then-load-it
	?a <- (load_arg ?file)
	(test (file-exists (str-cat (cwd) ?file)))
	=>
	(assert (command (file-contents (str-cat (cwd) ?file))))
	(retract ?a)
)

(defrule if-file-exists-then-load-it
    (declare (salience ?*high*))
	?a <- (load_arg ?file)
	(test (file-exists ?file))
	=>
	(assert (command (file-contents ?file)))
	(retract ?a)
)

(defrule if-use-ci-to-load-the-commands
	?arg <- (ci_load_arg ?file)
	(test (php_call "function_exists" "ci_paths"))
	=>
	(retract ?arg)
	; For each ci path, try to find the rule file in config/rules/
	(foreach ?rule (php_call "ci_paths" (str-cat "config/rules/" ?file)) (assert (load_arg ?rule)))
)

(defrule if-the-load-begin-with-http-load-using-http
	?l <- (load_arg ?file)
	(test (str-index "http://" ?file))
	=>
	(retract ?l)
	(assert (http_load_arg ?file))
)

(defrule load-commands-using-http
	?a <- (http_load_arg ?commands)
	=>
	(assert (command (file-contents ?commands)))
	(retract ?a)
)
